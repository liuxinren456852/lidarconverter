#include "helper.h"

QVector<DataPoint*> Helper::makeStraightLineDataPoints(
	DataPoint* start, DataPoint* end,
	double spacing, float* &data) {

	QVector<DataPoint*> points;

	Angle heading = Segment::heading(start, end);
	Angle A, b, c;
	
	//cosine rule
	A = Segment::longitudeDifference(start,end);
	b = Angle::Degrees(90.0 - start->lat().degs()); //polar distance
	c = Angle::Degrees(90.0 - end->lat().degs()); //polar distance
	
	Angle distance = Angle::Radians( acos( cos(b.rads())*cos(c.rads()) +
				sin(b.rads())*sin(c.rads())*cos(A.rads())) );
	double distance_meters = distance.rads()*RADIUS;
	int n = (int)ceil(distance_meters/spacing);

	if(abs(A.degs()) > 90.0) {
		int n1 = (int)floor((Angle::Degrees(89.0).rads()*RADIUS)/spacing);
		points = makeStraightLineDataPoints(start->lat().degs(),
				start->lon().degs(),
				heading.degs(), spacing, data, n1);
		DataPoint* l2 = points.last();
		points.pop_back();
		points += makeStraightLineDataPoints(l2,
				end, spacing, data);

	} else {
		points = makeStraightLineDataPoints(start->lat().degs(),
				start->lon().degs(),
				heading.degs(), spacing, data, n);

	}
	return points; 
}


/**
 * Wrapper around Helper::makeStraightLineCoordinates() that returns a vector
 * of DataPoints()
 *
 * @param data a float array that is assigned to each DataPoint()
 * @return a vector of DataPoints
 * @see makeStraightLineCoordinates()
 */ 
QVector<DataPoint*> Helper::makeStraightLineDataPoints(
		double init_lat, double init_lon,
	       	double heading, double spacing,
	    	float* &data, int n) {
	QVector< QPair<Angle,Angle> > coords = 
		makeStraightLineCoordinates(init_lat, init_lon, heading,
			       	spacing, n);
	QVector<DataPoint*> dps;
	for(int i = 0; i < coords.size(); i++) {
		DataPoint* dp = new DataPoint();
		dp->setLat(coords[i].first);
		dp->setLon(coords[i].second);
		dp->setData(data);
		dps.append(dp);
	}
	return dps;
}

/**
 * For testing purposes it is often desired to make a straight line along a
 * heading with a defined spacing for n points. This is calculated using 
 * spherical trigonometry 
 *
 * @param init_lat initial latitude (in degrees)
 * @param init_lon initial longitude (in degrees)
 * @param heading (in degrees)
 * @param spacing space between datapoints (in meters)
 * @param n number of datapoints
 *
 * @return a vector of (Latitude, Longitude) coordinate pairs
 *
 * \f$\phi_1=90^\circ -\arccos (\cos a\cos (90^\circ -\phi_0)+\sin 
 * a\sin (90^\circ -\phi_0)\cos C)\f$
 *
 * \f$\lambda_1=\arcsin (\frac{\sin a\sin C}{\sin(90^\circ -\phi_1)})+\lambda_0\f$
 *
 * @warning the difference in longitudes cannot be greater than 90degrees or things
 * will screw up horridly
 */
QVector< QPair<Angle,Angle> > Helper::makeStraightLineCoordinates(
		double init_lat, double init_lon, 
		double heading, double spacing, int n) {
	QVector< QPair<Angle,Angle> > coords;
	Angle A, B, C, a, b, c;
	C = Angle::Degrees(-1.0 * heading);
	b = Angle::Degrees(90.0 - init_lat);

	for(int i = 0; i < n; i++) {
		//law of cosines
		a = Angle::Radians( ((double)i*spacing)/RADIUS );
		c = Angle::Radians( acos( cos(a.rads())*cos(b.rads()) +
				sin(a.rads())*sin(b.rads())*cos(C.rads())));

		//law of sines
		A = Angle::Radians( asin( sin(a.rads())*sin(C.rads()) /
					sin(c.rads())));

		coords.append(QPair<Angle, Angle>(
				Angle::Degrees(90.0 - c.degs()),
				Angle::Degrees(A.degs() + init_lon)));
		if(i >= 1210 && i <= 1225) {
			qDebug() << i << ": A = " << A.degs() << ", C = " << C.degs()
		       	<< ", a = " << a.degs()	<< ", b = " << b.degs()
		       	<< ", c = " << c.degs() << ":: lat = " 
			<< coords.last().first.degs() << ", lon = "
			<< coords.last().second.degs();
			qDebug() << sin(a.rads())*sin(C.rads()) /
					sin(c.rads());
		}
	}
	return coords;

}

/**
 * Generates simple KML file with Placemarks at (Lat, Lon) from the DataPoints
 *
 * @param points a Segment or other vector of DataPoint*s
 * @param filename the filename to write the kml to
 */
void Helper::makeKMLPath(QVector<DataPoint*> points, QString filename) {
	QFile file(filename);
	if (!file.open(QIODevice::WriteOnly | QIODevice::Text))
		return;
	QTextStream out(&file);
	
	out << "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n";
	out << "<kml xmlns=\"http://earth.google.com/kml/2.1\">\n";
	out << "<Document>\n";
	out << "<name>Autogenerated Plot by Helper::makeKMLPath</name>\n";

	for(int i = 0; i < points.size(); i++) {
		out << "<Placemark>\n";
		out << "  <name>Point #" << i+1 << "</name>\n";
		out << "  <Point>\n";
		out << QString("    <coordinates>%1,%2</coordinates>").arg(
				points.at(i)->lon().degs()).arg(
				points.at(i)->lat().degs());
		out << "  </Point>\n";
		out << "</Placemark>\n\n";
	}

	out << "</Document>\n";
	out << "</kml>";
}
